unit UFormOfBody;

interface

uses
    Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
    Dialogs, UFormGeneric, StdCtrls, ExtCtrls, Buttons, UProgresBasModal;

type

    TCallBackShowProgressBar = function(const info: String; const size: Integer): TFProgressBar of object;
    TCallBackHideProgressBar = procedure(form:TFProgressBar) of Object;
    TCallBackIncrementeProgressBar = procedure(const value: Integer) of Object;
    TCallBackCloseForm = procedure(form: TForm) of Object;

    TformOfBody = class(TformGeneric)
        pnFull: TPanel;
        pnActions: TPanel;
    pnTitle: TPanel;
    bvPnActions: TBevel;
    pnBtnReturn: TPanel;
    btnReturn: TSpeedButton;

        procedure btnFormReturnClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    private
        _title: String;
        _finished: Boolean;
        _closeForm: TCallBackCloseForm;

    protected
        showProgressBar: TCallBackShowProgressBar;
        hideProgressBar: TCallBackHideProgressBar;
        incrementeProgressBar: TCallBackIncrementeProgressBar;

        procedure chargeComponentes(childPanel: TPanel);
        procedure closeActions; virtual;
        procedure openActions; virtual;

        procedure setTitle(const title: String);
        function getTitle():String;
    public
        showMessageError: TCallBackShowMessage;
        showMessageInfo: TCallBackShowMessage;
        showMessageWarning: TCallBackShowMessage;
        showMessageOk: TCallBackShowMessage;


        function isFinished(): Boolean;
        procedure setCallBackShowProgressBar(proc: TCallBackShowProgressBar);
        procedure setCallBackHideProgressBar(proc: TCallBackHideProgressBar);
        procedure setCallBackIncrementeProgressBar(proc: TCallBackIncrementeProgressBar);

        procedure setCallBackCloseForm(proc: TCallBackCloseForm);

    end;

implementation

{$R *.dfm}
{ TformOfBody }

procedure TformOfBody.btnFormReturnClick(Sender: TObject);
begin
    Self.Close;
    _finished := true;
    _closeForm(Self);
end;

procedure TformOfBody.chargeComponentes(childPanel: TPanel);
begin
    theme.makeRounded(childPanel, 10);
    childPanel.Parent := pnFull;
    theme.makeRounded(pnFull);
end;

procedure TformOfBody.closeActions;
begin
    btnReturn.Enabled := false;
end;

procedure TformOfBody.FormCreate(Sender: TObject);
begin
  inherited;
  pnTitle.Caption := Self._title;
end;

procedure TformOfBody.FormShow(Sender: TObject);
var
  i: Integer;
begin
  inherited;

  for i := 0 to Self.ComponentCount - 1 do begin
    if(Self.Components[i] is TBitBtn) then begin
      (Self.Components[i] as TBitBtn).Width := 50;
      theme.makeRounded((Self.Components[i] as TBitBtn), 5);
    end;
  end;
end;

function TformOfBody.getTitle: String;
begin
    result := Self._title;
end;

function TformOfBody.isFinished: Boolean;
begin
    result := Self._finished;
end;

procedure TformOfBody.openActions;
begin
    btnReturn.Enabled := true;
end;

procedure TformOfBody.setCallBackCloseForm(proc: TCallBackCloseForm);
begin
    Self._closeForm := proc;
end;

procedure TformOfBody.setCallBackHideProgressBar
  (proc: TCallBackHideProgressBar);
begin
    Self.hideProgressBar := proc;
end;

procedure TformOfBody.setCallBackIncrementeProgressBar
  (proc: TCallBackIncrementeProgressBar);
begin
    Self.incrementeProgressBar := proc;
end;
procedure TformOfBody.setCallBackShowProgressBar
  (proc: TCallBackShowProgressBar);
begin
    Self.showProgressBar := proc;
end;

procedure TformOfBody.setTitle(const title: String);
begin
  Self._title := title;
end;

end.
