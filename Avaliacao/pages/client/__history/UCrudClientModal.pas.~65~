unit UCrudClientModal;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Buttons, StdCtrls, Mask, ExtCtrls, UformGeneric, UClientModel;

type
    TStatusCrud = (inNew, inEdit, inPreview);

    TCloseModal = procedure(const client: TClientModel; const statusCrud: TStatusCrud) of Object;
    TValidationBusiness = function(const client: TClientModel; const statusCrud: TStatusCrud): String of Object;
    TMessage = procedure (const title: String; const msg: String) of Object;

  TFrmCrudClientModal = class(TFormGeneric)
    pnCrudData: TPanel;
    lblEdtPostalCode: TLabel;
    lblEdtStreet: TLabel;
    edtPostalCode: TMaskEdit;
    edtStreet: TEdit;
    pnTitleDataClient: TPanel;
    pnLabelsPersonDataClient: TPanel;
    lblEdtName: TLabel;
    lblEdtEmail: TLabel;
    lblEdtIdCard: TLabel;
    lblEdtSocialSecurity: TLabel;
    lblEdtTelephone: TLabel;
    pnEdtsPersonDataClient: TPanel;
    edtName: TEdit;
    edtEmail: TEdit;
    edtIdCard: TEdit;
    edtSocialSecurity: TMaskEdit;
    edtTelephone: TMaskEdit;
    pnActionsBtnClient: TPanel;
    pnBtnCancel: TPanel;
    btnCrudCancel: TSpeedButton;
    pnBtnSave: TPanel;
    btnCrudSave: TSpeedButton;
    lblEdtNumber: TLabel;
    edtNumber: TEdit;
    lblEdtComplement: TLabel;
    edtComplement: TEdit;
    lbledtDistrict: TLabel;
    edtDistrict: TEdit;
    lblEdtCity: TLabel;
    edtCity: TEdit;
    lblEdtState: TLabel;
    edtState: TEdit;
    lblEdtCountry: TLabel;
    edtCountry: TEdit;
    pnEdtCep: TPanel;
    pnBtnSearchPostalCode: TPanel;
    btnSearchPostalCode: TSpeedButton;
    Button1: TButton;
    procedure btnCrudCancelClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnCrudSaveClick(Sender: TObject);
    procedure edtNameKeyPress(Sender: TObject; var Key: Char);
    procedure btnSearchPostalCodeClick(Sender: TObject);
    procedure edtPostalCodeExit(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private

    _client: TClientModel;
    _actualStatusCrud: TStatusCrud;
    closeModal: TCloseModal;
    validationBusiness: TValidationBusiness;
    procedure clearFormCrud;
    procedure adjustFormFromStatusCrud();
    procedure chargeForm();
    function chargeClient() : Boolean;
    function validationFields(): Boolean;


  public
    showMessageError: TMessage;
    constructor Create(Aowner: TComponent; const statusCrud: TStatusCrud; client: TClientModel; closeCrudModal: TCloseModal; validationSaveBusiness: TValidationBusiness);override;
  end;


implementation

uses Util, UConnectionRestClient, UException, UAddresSearchCep;

{$R *.dfm}

procedure TFrmCrudClientModal.adjustFormFromStatusCrud();
var
  i: Integer;
begin

    pnBtnSave.Visible := _actualStatusCrud in [inEdit, inNew];

    case _actualStatusCrud of
        inNew:
            begin
                Self.Color := theme.colorFormInNew;
                pnCrudData.Caption := 'Novo cliente';
                Self._client := TClientModel.Create;
            end;
        inEdit:
            begin
                Self.Color := theme.colorFormInEdit;
                pnCrudData.Caption := 'Alterando o cliente';
            end;
        inPreview:
            begin
                Self.Color := theme.colorFormInView;
                pnCrudData.Caption := 'Visualizando o cliente';
            end;
    end;

    for i := 0 to pnEdtsPersonDataClient.ControlCount - 1 do begin
        if(pnEdtsPersonDataClient.Controls[i] is TEdit) then begin
            (pnEdtsPersonDataClient.Controls[i] as TEdit).Enabled := _actualStatusCrud <> inPreview;
        end else if(pnEdtsPersonDataClient.Controls[i] is TMaskEdit) then begin
            (pnEdtsPersonDataClient.Controls[i] as TMaskEdit).Enabled := _actualStatusCrud <> inPreview;
        end;
    end;

    edtPostalCode.Enabled := _actualStatusCrud <> inPreview;


end;

procedure TFrmCrudClientModal.btnCrudCancelClick(Sender: TObject);
begin
    clearFormCrud;
    closeModal(nil, Self._actualStatusCrud);
    Close();
end;
procedure TFrmCrudClientModal.btnCrudSaveClick(Sender: TObject);
begin
    if(chargeClient()) then begin
        closeModal(Self._client, Self._actualStatusCrud);
        Close();
    end;
end;

procedure TFrmCrudClientModal.btnSearchPostalCodeClick(Sender: TObject);
var
    con: TConRestClient;
    responseJson: String;
    searchCep: TAddressCEP;
begin
    inherited;

    if(edtPostalCode.Enabled) then begin
        con := TConRestClient.Create(Self, 'http://viacep.com.br/ws', nil);
        searchCep := TAddressCEP.Create;
        try
            try
                responseJson := con.sendGet(removeMascaraCEP(edtPostalCode.Text)+'/json', '');

                searchCep.fromJsonString(responseJson);

                with searchCep do begin
                    edtStreet.Text := logradouro;
                    if(Trim(complemento) <> EmptyStr) then begin
                        edtComplement.Text := complemento;
                    end;
                    edtDistrict.Text := bairro;
                    edtCity.Text := localidade;
                    edtCountry.Text := 'Brasil';
                    edtState.Text := uf;
                end;
                edtNumber.SetFocus;
            except
                on error: ExceptionCMP do begin
                    showMessageError(error.msg.title, error.msg.msg);
                end;

            end;
        finally
            con.Free;
            searchCep.Free;
        end;
    end;
end;

procedure TFrmCrudClientModal.Button1Click(Sender: TObject);
begin
  inherited;
    edtPostalCode.Text := '74.483-330';
    edtStreet.Text := 'Rua José do Patrocinio';
    edtName.Text := 'Clayton Marques Pereira';
    edtEmail.Text := 'marquesclayton1@gmail.com';
    edtIdCard.Text := '1.917.970';
    edtSocialSecurity.Text := '469.716.451-20';
    edtTelephone.Text := '(62) 98106-2123';
    edtNumber.Text := 's/n';
    edtComplement.Text := 'Costa Verde Condoínio Horizontal, Casa 155';
    edtDistrict.Text := 'Parque Industrial Joao Braz';
    edtCity.Text := 'Goiânia';
    edtState.Text := 'Goiás';
    edtCountry.Text := 'Brasil';
end;

function TFrmCrudClientModal.chargeClient(): Boolean;
var msg: String;
begin
    result := validationFields();

    if(result) then begin
        if(not Assigned(Self._client)) then begin
            Self._client := TClientModel.Create;
        end;

        with Self._client do begin
            Self._client.name := edtName.Text;
            idCard := edtIdCard.Text;
            socialSecurity := edtSocialSecurity.Text;
            telephone := edtTelephone.Text;
            email := edtEmail.Text;
            postalCode := edtPostalCode.Text;
            street := edtStreet.Text;
            number := edtNumber.Text;
            complement := edtComplement.Text;
            district := edtDistrict.Text;
            state := edtState.Text;
            city := edtCity.Text;
            country := edtCountry.Text;
        end;

        msg := validationBusiness(Self._client, Self._actualStatusCrud);

        if(msg = EmptyStr) then begin
            result := true;
        end else begin
            edtName.SetFocus;
            showMessageError('Ação cancelada', msg);
            result := false;
        end;

    end;
end;

procedure TFrmCrudClientModal.chargeForm;
begin
    if(Assigned(Self._client)) then begin
        with Self._client do begin
            edtName.Text := Self._client.name;
            edtEmail.Text := email;
            edtIdCard.Text := idCard;
            edtSocialSecurity.Text := socialSecurity;
            edtTelephone.Text := telephone;
            edtPostalCode.Text := postalCode;
            edtStreet.Text := street;
            edtNumber.Text := number;
            edtComplement.Text := complement;
            edtDistrict.Text := district;
            edtCity.Text := city;
            edtState.Text := state;
            edtCountry.Text := country;
        end;
    end;
end;

procedure TFrmCrudClientModal.clearFormCrud;
var
  i: Integer;

begin
    for i := 0 to Self.ComponentCount - 1 do begin
        if((Self.Components[i] is TEdit) or (Self.Components[i] is TMaskEdit)) then begin
            (Self.Components[i] as TCustomEdit).Text := EmptyStr;
        end;
    end;

end;

constructor TFrmCrudClientModal.Create(Aowner: TComponent;
  const statusCrud: TStatusCrud; client: TClientModel;
  closeCrudModal: TCloseModal; validationSaveBusiness: TValidationBusiness);
begin
    inherited Create(Aowner);
    Self._client := client;
    closeModal := closeCrudModal;
    validationBusiness := validationSaveBusiness;
    Self._actualStatusCrud := statusCrud;
end;

procedure TFrmCrudClientModal.edtNameKeyPress(Sender: TObject; var Key: Char);
var
    nextComponent: boolean;
begin
    nextComponent :=  true;
    if ((key = #13) or (Key = #9)) then begin
        key := #0;
        if(Sender is TEdit) then begin
            if(LowerCase((Sender as TEdit).Name) = 'edtemail') then begin
                edtPostalCode.SetFocus;
                nextComponent := false;
            end;
        end;
        if(nextComponent) then begin
            Screen.ActiveForm.Perform(WM_NextDlgCtl, 0, 0);
        end;
    end;
end;

procedure TFrmCrudClientModal.edtPostalCodeExit(Sender: TObject);
var
    fieldValue: String;
begin
  inherited;
    fieldValue := removeMascaraCEP(edtPostalCode.Text);
    fieldValue := Trim(fieldValue);

    if(fieldValue <> EmptyStr) then begin
        if(stringUtil.isNumber(fieldValue)) then begin
            if(Length(fieldValue) = 8) then begin
                btnSearchPostalCodeClick(btnSearchPostalCode);
            end;
        end;
    end;
end;

procedure TFrmCrudClientModal.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
    Action := caFree;
end;

procedure TFrmCrudClientModal.FormCreate(Sender: TObject);
begin
    adjustFormFromStatusCrud();
    chargeForm();
end;

procedure TFrmCrudClientModal.FormShow(Sender: TObject);
begin

    theme.makeRounded(Self);
    theme.makeRounded(pnTitleDataClient);

    if(Self._actualStatusCrud <> inPreview) then begin
        edtName.SetFocus;
        edtName.SelStart := 0;
    end;
end;

function TFrmCrudClientModal.validationFields: Boolean;
    var
        shortSocialSecurity: String;
        shortTelephone: String;
        shortPostalCode: String;

    function validate(edit: TCustomEdit; const min, max:Integer; const msgError: String; const required: Boolean = false): Boolean;
    var
        balk: Boolean;
        value: String;
        size: Integer;
        stop : Boolean;
    begin
        balk := true;
        value := Trim(edit.Text);
        size := Length(value);
        stop := false;
        if(not required) then begin
            if(value = EmptyStr) then begin
                validate := true;
                stop := true;
            end;
        end;
        if(not stop)then begin
            balk := (size < min) or (size > max);
            if(balk) then begin
                showMessageError('Campo obrigatório', msgError);
                edit.SetFocus;
            end;
            validate := not balk;
        end;
    end;
begin
    result := true;
    if(not validate(edtName, 7, 80, 'O nome do cliente deve conter entre 7 e 80 caracteres.', true)) then begin
        result := false;
    end else if(not validate(edtIdCard, 5, 10, 'O registro de identidade do cliente deve conter entre 5 e 10 caracteres')) then begin
        result := false;
    end;

    if (result) then begin
        shortSocialSecurity := removeMascaraCPF(edtSocialSecurity.Text);
        if(not validaCPF(shortSocialSecurity)) then begin
            showMessageError('Campo obrigatório', 'CPF inválido.');
            edtSocialSecurity.SetFocus;
            result := false;
        end else begin
            shortTelephone := removeMascaraTelefone(edtTelephone.Text);

            if(Length(shortTelephone) < 10) then begin
                showMessageError('Campo obrigatório', 'Informe um telefone válido. Ex.: (62) 9999-9999');
                edtTelephone.SetFocus;
                result := false;
            end;
        end;
    end;

    if(result) then begin
        if(not validaEmail(edtEmail.Text)) then begin
            showMessageError('Campo obrigatório', 'Informe um e-mail válido.');
            edtEmail.SetFocus;
            result := false;
        end;
    end;

    if(result) then begin
        shortPostalCode := removeMascaraCEP(edtPostalCode.Text);
        if(not stringUtil.isNumber(shortPostalCode)) then begin
            showMessageError('Campo obrigatório', 'O CEP deve conter 10 caractres no seguinte formato: 00.000-000');
            edtPostalCode.SetFocus;
            result := false;
        end else if(Length(shortPostalCode) <> 8) then begin
            showMessageError('Campo obrigatório', 'O CEP deve conter 10 caractres no seguinte formato: 00.000-000');
            edtPostalCode.SetFocus;
            result := false;
        end;
        if(not validate(edtPostalCode, 10, 10, 'O CEP deve conter 10 caractres no seguinte formato: 00.000-000', true)) then begin
            result := false;
        end else if (not validate(edtStreet, 4, 75, 'O logradouro deve conter entre 4 e 75 caracteres', true)) then begin
            result := false;
        end else begin
            if(stringUtil.isNumber(edtNumber.Text))then begin
                if (not validate(edtNumber, 1, 5, 'O número deve ser informado entre 1 e 5 dígitos, ou se não tiver um número informar ''S/N''', true)) then begin
                    result := false;
                end;
            end else begin
                if(LowerCase(edtNumber.Text) <> 's/n') then begin
                    showMessageError('Campo obrigatório', 'O número deve ser informado entre 1 e 5 dígitos, ou se não tiver um número informar ''S/N''');
                    edtNumber.SetFocus;
                    result := false;
                end;
            end;
        end;
    end;

    if(result) then begin
        if(not validate(edtComplement, 5, 140, 'Informe o complemento do endereço entre 5 e 140 carateres')) then begin
            result := false;
        end else if(not validate(edtDistrict, 7, 50, 'Informe o nome do bairro entre 7 e 50 carateres', true)) then begin
            result := false;
        end else if(not validate(edtCity, 7, 50, 'Informe o nome da cidade entre 7 e 50 carateres', true)) then begin
            result := false;
        end else if(not validate(edtState, 4, 20, 'Informe o nome da estado entre 4 e 20 carateres', true)) then begin
            result := false;
        end else if(not validate(edtCountry, 4, 45, 'Informe o nome do país entre 4 e 45 carateres', true)) then begin
            result := false;
        end;
    end;
end;

end.
